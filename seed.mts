import { faker } from "@faker-js/faker/locale/es_MX";
import { createSeedClient } from "@snaplet/seed";
// import { copycat } from "@snaplet/copycat"
// import inside from 'point-in-polygon'

// type PolygonsAndMultiPolygons = number[][][] | number[][][][]
// type Polygons = Exclude<PolygonsAndMultiPolygons, number[][][][]>

// const isMultiPolygon = (initial: PolygonsAndMultiPolygons): initial is number[][][][] => {
//   return initial.length > 0 && Array.isArray(initial[0][0][0]);
// }

// const allMexicanDots = mx.features.map(({ geometry }) => {
//   const { coordinates } = geometry;
//   if (isMultiPolygon(coordinates)) {
//     return coordinates.flat().flat();
//   } else {
//     return coordinates.flat();
//   }
// });

// This is a basic example generated by Snaplet to start you off, check out the docs for where to go from here
// * For more on getting started with @snaplet/seed: https://docs.snaplet.dev/getting-started/quick-start/seed
// * For a more detailed reference: https://docs.snaplet.dev/core-concepts/seed

const snaplet = await createSeedClient({
  dryRun: process.env.DRY !== "0",
});

// Clears all existing data in the database, but keep the structure
await snaplet.$resetDatabase();

// auth users
await snaplet.users([{
  instanceId: "00000000-0000-0000-0000-000000000000",
  id: "0a830161-2854-4b36-84a3-94ccf9184257",
  aud: "authenticated",
  role: "authenticated",
  email: "yosept.flores@gmail.com",
  encryptedPassword:
    "$2a$10$NnBBS1xoBsI20zhGSZdhYuJuq4jSp1It7E7KdVrnlG2C.85ZLxYy6",
  emailConfirmedAt: "2023-12-31 00:42:35.097475+00",
  invitedAt: null,
  confirmationToken: "",
  confirmationSentAt: null,
  recoveryToken: "",
  recoverySentAt: null,
  emailChange: "",
  emailChangeTokenNew: "",
  emailChangeSentAt: null,
  lastSignInAt: null,
  rawAppMetaData: { "provider": "email", "providers": ["email"] },
  rawUserMetaData: {},
  isSuperAdmin: null,
  createdAt: "2023-12-31 00:42:35.093882+00",
  updatedAt: "2023-12-31 00:42:35.097616+00",
  phone: null,
  phoneConfirmedAt: null,
  phoneChange: "",
  phoneChangeToken: "",
  emailChangeTokenCurrent: "",
  emailChangeConfirmStatus: 0,
  bannedUntil: null,
  reauthenticationToken: "",
  reauthenticationSentAt: null,
  isSsoUser: false,
  deletedAt: null,
  phoneChangeSentAt: null,
}]);

const now = new Date().toISOString();

const emptyNode = {
  deletedAt: null,
  updatedAt: now,
};

await snaplet.customers((x) =>
  x(3, () => {
    const name = faker.person.fullName();
    const [firstName, lastName] = name.split(" ");
    return {
      email: faker.internet.email({ firstName, lastName }),
      name,
      ...emptyNode,
    };
  })
);

await snaplet.applicants((x) =>
  x(50, () => {
    const name = faker.person.fullName();
    const [firstName, lastName] = name.split(" ");
    return {
      email: faker.internet.email({ firstName, lastName }),
      name,
      ...emptyNode,
    };
  }), { connect: true });

// await snaplet.maps([
//   { name: "billboards", deletedAt: null, updatedAt: null },
//   { name: "mexican_states", deletedAt: null, updatedAt: null,  },
// ], { connect: true })

// await snaplet.billboards(x => billboardsAndIds.map((bai) => ({
//   ...bai,
//   address: faker.location.streetAddress(),
//   postCode: faker.location.zipCode(),
//   name: faker.location.street(),
//   Map: ({ store }) => {
//     const map = store.Map.find(x => x.name === "billboards")
//     if (!map) throw new Error("Map not found")
//     return map
//   },
// })), { connect: true })

// await snaplet.places(statesAndIds.map((sai) => ({
//   ...sai,
//   Map: ({ store }) => {
//     const map = store.Map.find(x => x.name === "mexican_states")
//     if (!map) throw new Error("Map not found")
//     return map
//   }
// })), { connect: true })

await snaplet.applicantOnCustomers(x => x(15, () => emptyNode), { connect: true })
