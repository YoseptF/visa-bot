import { faker } from '@faker-js/faker/locale/es_MX'
import mx from "./jsons/mx_states.json"
import billboards from "./jsons/billboards_low.json"
import { createSeedClient } from '@snaplet/seed';
// import { copycat } from "@snaplet/copycat"
// import inside from 'point-in-polygon'

// type PolygonsAndMultiPolygons = number[][][] | number[][][][]
// type Polygons = Exclude<PolygonsAndMultiPolygons, number[][][][]>

// const isMultiPolygon = (initial: PolygonsAndMultiPolygons): initial is number[][][][] => {
//   return initial.length > 0 && Array.isArray(initial[0][0][0]);
// }

// const allMexicanDots = mx.features.map(({ geometry }) => {
//   const { coordinates } = geometry;
//   if (isMultiPolygon(coordinates)) {
//     return coordinates.flat().flat();
//   } else {
//     return coordinates.flat();
//   }
// });

// This is a basic example generated by Snaplet to start you off, check out the docs for where to go from here
// * For more on getting started with @snaplet/seed: https://docs.snaplet.dev/getting-started/quick-start/seed
// * For a more detailed reference: https://docs.snaplet.dev/core-concepts/seed

const snaplet = await createSeedClient({
  dryRun: process.env.DRY !== '0',
});

// Clears all existing data in the database, but keep the structure
await snaplet.$resetDatabase()

// auth users
await snaplet.users([{
  instanceId: "00000000-0000-0000-0000-000000000000",
  id: "0a830161-2854-4b36-84a3-94ccf9184257",
  aud: "authenticated",
  role: "authenticated",
  email: "yosept.flores@gmail.com",
  encryptedPassword: "$2a$10$NnBBS1xoBsI20zhGSZdhYuJuq4jSp1It7E7KdVrnlG2C.85ZLxYy6",
  emailConfirmedAt: "2023-12-31 00:42:35.097475+00",
  invitedAt: null,
  confirmationToken: "",
  confirmationSentAt: null,
  recoveryToken: "",
  recoverySentAt: null,
  emailChange: "",
  emailChangeTokenNew: "",
  emailChangeSentAt: null,
  lastSignInAt: null,
  rawAppMetaData: { "provider": "email", "providers": ["email"] },
  rawUserMetaData: {},
  isSuperAdmin: null,
  createdAt: "2023-12-31 00:42:35.093882+00",
  updatedAt: "2023-12-31 00:42:35.097616+00",
  phone: null,
  phoneConfirmedAt: null,
  phoneChange: "",
  phoneChangeToken: "",
  emailChangeTokenCurrent: "",
  emailChangeConfirmStatus: 0,
  bannedUntil: null,
  reauthenticationToken: "",
  reauthenticationSentAt: null,
  isSsoUser: false,
  deletedAt: null,
  phoneChangeSentAt: null,
}])

const emptyNode = {
  deletedAt: null,
  updatedAt: null,
}

const statesAndIds = mx.features.map((f) => ({
  id: f.properties.id,
  name: f.properties.state_name,
  ...emptyNode
})
)

const billboardsAndIds = billboards.features.map((f) => ({
  id: f.properties.id,
  ...emptyNode
}))

// const generateRandomCoordinate = () => {
//   let point = { lat: 0, lng: 0 };
//   let isInside = false;

//   while (!isInside) {
//     // Generate a random latitude and longitude
//     const lat = faker.location.latitude({ precision: 13 })
//     const lng = faker.location.longitude({ precision: 13 })

//     // Check if the point is inside any of the polygons
//     for (const polygon of allMexicanDots) {
//       if (inside([lng, lat], polygon)) {
//         isInside = true;
//         point = { lat, lng };
//         break;
//       }
//     }
//   }

//   return point;
// }

// In case we need to regenerate the billboards
// const BILLBOARD_COUNT = 1200;

// const fakedBillboards = Array(BILLBOARD_COUNT).fill(0).map((_, i) => {
//   process.stdout.write(`Generating fake billboards: 0 / ${BILLBOARD_COUNT}`);

//   // write in the console the progress, each line deletes the previous one
//   // so that the console does not get saturated
//   process.stdout.clearLine(0);
//   process.stdout.cursorTo(0);
//   process.stdout.write(`Generating fake billboards: ${i} / ${BILLBOARD_COUNT}`);

//   const { lat, lng } = generateRandomCoordinate()

//   return {
//     "type": "Feature",
//     "properties": {
//       "id": copycat.uuid(lat + lng),
//     },
//     "geometry": {
//       "coordinates": [
//         lng,
//         lat
//       ],
//       "type": "Point"
//     }
//   }
// })
await snaplet.customers([{
  email: "yosept.flores@mail.com",
  name: "Joseph Flores",
  ...emptyNode,
}])

await snaplet.customers(x => x(3, () => {
  const name = faker.person.fullName()
  return {
    email: faker.internet.email({ firstName: name.split(' ')[0], lastName: name.split(' ')[1] }),
    name,
    ...emptyNode,
  }
}
))

await snaplet.maps([
  { name: "billboards", deletedAt: null, updatedAt: null },
  { name: "mexican_states", deletedAt: null, updatedAt: null,  },
], { connect: true })

await snaplet.billboards(x => billboardsAndIds.map((bai) => ({
  ...bai,
  address: faker.location.streetAddress(),
  postCode: faker.location.zipCode(),
  name: faker.location.street(),
  Map: ({ store }) => {
    const map = store.Map.find(x => x.name === "billboards")
    if (!map) throw new Error("Map not found")
    return map
  },
})), { connect: true })

await snaplet.places(statesAndIds.map((sai) => ({
  ...sai,
  Map: ({ store }) => {
    const map = store.Map.find(x => x.name === "mexican_states")
    if (!map) throw new Error("Map not found")
    return map
  }
})), { connect: true })

await snaplet.billboardInPlaces(x => x(15, () => emptyNode), { connect: true })
